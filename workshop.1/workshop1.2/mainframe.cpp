float toDegrees() s
{
    // Перевод радиан в градусы
}

void redrawFrame()
{
    // Вывод стрелки на экран
}

void pollEvents()
{
    // Обработка события закрытия окна и передвижения мыши
    // Обновление вектора позиции мыши относительно ее перемещения
}

float vectorLenght()
{
    // Расчет длины вектора
}

sf::Vector2f normalize()
{
    // Нормализация вектора при помощи длины вектора
}

void update()
{
    // Изменение угла поворота в сторону мыши с ограничением скорости поворота при помощи счетчика
    // Поворот стрелки в сторону мыши с ограничением сорости
    // Обновление позиции стрелки относительно мыши при помощи счетчика и нормализации вектора
}

void init()
{
    // Инициализация цвета стрелки
    // Инициализация позиции стрелки
    // Инициализация формы стрелки + её гранцы
}

int main()
{
    // Инициализация окна
    // Инициализация счетчика
    // Объявление стрелки и вектор позиции мыши
    // Инициализация позиции, цвета и формы стрелки
    init();
    // Объявление цикла, работающего каждый кадр
    while (window.isOpen())
    {
        // Обработка событий и обновление вектора позиции мыши
        pollEvents();
        // Обновление позиции и поворот стрелки относительно мыши при помощи счетчика и нормализации вектора
        update();
        // Вывод стрелки и указки на экран
        redrawFrame();
    }
}